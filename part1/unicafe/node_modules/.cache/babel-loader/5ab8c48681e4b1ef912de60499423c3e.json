{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\potemar\\\\Documents\\\\src\\\\FullStack Course\\\\part1\\\\unicafe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\potemar\\\\Documents\\\\src\\\\FullStack Course\\\\part1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const handleGoodFeedback = () => {\n    setGood(good + 1);\n  };\n\n  const handleNeutralFeedback = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const handleBadFeedback = () => {\n    setBad(bad + 1);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Give Feedback\"), React.createElement(Button, {\n    text: \"Good\",\n    onClick: handleGoodFeedback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(Button, {\n    text: \"Neutral\",\n    onClick: handleNeutralFeedback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(Button, {\n    text: \"Bad\",\n    onClick: handleBadFeedback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Statistics\"), React.createElement(Statistics, {\n    text: \"Good\",\n    value: good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"Neutral\",\n    value: neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"Bad\",\n    value: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n};\n\nconst Button = ({\n  onClick,\n  text\n}) => React.createElement(\"button\", {\n  onClick: onClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, text);\n\nconst Statistics = props => {\n  const text = props.text,\n        value = props.value,\n        good = props.good,\n        neutral = props.neutral,\n        bad = props.bad;\n  console.log(props);\n  const all = good + neutral + bad;\n  const average = (good - bad) / all;\n  const positive = (good / all * 100).toFixed(2) + '%';\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, text, \": \", value); // if (all > 0) {\n  //     return (\n  //         <div>\n  //             <p>{text}: {good}</p>\n  //             <p>Neutral: {neutral}</p>\n  //             <p>Bad: {bad}</p>\n  //             <p>All: {all} </p>\n  //             <p>Average: {average}</p>\n  //             <p>Positive: {positive}</p>\n  //         </div>\n  //     )\n  // }\n  // return (\n  //     <div>\n  //         <p>No feedback given</p>\n  //         <p>{text}: {value}</p>\n  //     </div>\n  // )\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:\\Users\\potemar\\Documents\\src\\FullStack Course\\part1\\unicafe\\src\\index.js"],"names":["React","useState","ReactDOM","App","good","setGood","neutral","setNeutral","bad","setBad","handleGoodFeedback","handleNeutralFeedback","handleBadFeedback","Button","onClick","text","Statistics","props","value","console","log","all","average","positive","toFixed","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const handleGoodFeedback = () => {\n    setGood(good + 1)\n  }\n\n  const handleNeutralFeedback = () => {\n    setNeutral(neutral + 1)\n  }\n\n  const handleBadFeedback = () => {\n    setBad(bad + 1)\n  }\n  \n  return (\n    <div>\n      <h1>Give Feedback</h1>\n      <Button text=\"Good\" onClick = {handleGoodFeedback}/>\n      <Button text=\"Neutral\" onClick = {handleNeutralFeedback}/>\n      <Button text=\"Bad\" onClick = {handleBadFeedback}/>\n      <h1>Statistics</h1>\n      {/* <Statistics good={good} neutral={neutral} bad={bad}/> */}\n      <Statistics text=\"Good\" value={good}/>\n      <Statistics text=\"Neutral\" value={neutral}/>\n      <Statistics text=\"Bad\" value={bad}/>\n    </div>\n  )\n}\n\nconst Button = ({onClick, text}) => \n(\n  <button onClick={onClick}>{text}</button>\n)\n\nconst Statistics = (props) => {\n    const { text, value, good, neutral, bad } = props\n    console.log(props)\n    const all = good + neutral + bad\n    const average = (good - bad)/all\n    const positive = ((good/all) * 100).toFixed(2) + '%'\n\n    return (\n        <p>{text}: {value}</p>\n    )\n    // if (all > 0) {\n    //     return (\n    //         <div>\n    //             <p>{text}: {good}</p>\n    //             <p>Neutral: {neutral}</p>\n    //             <p>Bad: {bad}</p>\n    //             <p>All: {all} </p>\n    //             <p>Average: {average}</p>\n    //             <p>Positive: {positive}</p>\n    //         </div>\n    //     )\n    // }\n\n    // return (\n    //     <div>\n    //         <p>No feedback given</p>\n    //         <p>{text}: {value}</p>\n    //     </div>\n    // )\n}\n\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}